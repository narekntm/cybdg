import { each } from "cypress/types/bluebird";

describe('Add New user section', () => {
    beforeEach(() => {
        cy.visit('http://127.0.0.1:8080/Resources/htmls/CSS/user_management.html')
    })
    const name = "Joe";
    const email = "qwerty123@gmail.com";
    const age = 18;
    const role = "Admin";
    const gender = "Male";
    const subscribtion = "Product Updates";
    const status = "Active";

    context('Positive cases', () => {
        it('Should check all positive cases with this section', () => {
            cy.get('section').eq(1).should('exist')
            cy.get('#form-title').should('exist')
            cy.get('#user-form').should('exist')
            cy.get('#name').type(name)
            cy.get('#name').should('have.value', name)
            cy.get('#role').select('')
            cy.get('option[value="Admin"]').should('be.visible')
            cy.get('option[value="Editor"]').should('be.visible')
            cy.get('option[value="Viewer"]').should('be.visible')
            cy.get('#role').select(role)
            cy.get('#role').should('have.value', role)
            cy.get('#age').type(age.toString())
            cy.get('#age').should('have.value', age)
            cy.get('#email').type(email)
            cy.get('#email').should('have.value', email)
            cy.get('input[value="Male"]').should('not.be.checked').check()
            cy.get('input[value="Male"]').should('be.checked')
            cy.get('input[value="Product Updates"]').should('not.be.checked').check()
            cy.get('input[value="Product Updates"]').should('be.checked')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('#name').should('not.have.value')
            cy.get('#role').should('not.have.value')
            cy.get('#age').should('not.have.value')
            cy.get('#email').should('not.have.value')
            cy.get('input[value="Male"]').should('not.be.checked')
            cy.get('input[value="Female"]').should('not.be.checked')
            cy.get('input[value="Other"]').should('not.be.checked')
            cy.get('input[value="Newsletter"]').should('not.be.checked')
            cy.get('input[value="Product Updates"]').should('not.be.checked')
            cy.get('tbody tr').should('have.length', 4)
            cy.get('tbody tr').last().within(() => {
                cy.get('.btn-secondary.edit-btn').should('be.visible')
                cy.get('.btn-danger.delete-btn').should('be.visible')
                cy.get('.btn-primary.status-btn').should('be.visible')
            })
            cy.get('tbody tr').last().within(() => {
                cy.get('td').eq(0).should('contain', name)
                cy.get('td').eq(1).should('contain', role)
                cy.get('td').eq(2).should('contain', age)
                cy.get('td').eq(3).should('contain', email)
                cy.get('td').eq(4).should('contain', gender)
                cy.get('td').eq(5).should('contain', subscribtion)
                cy.get('td').eq(6).should('contain', status)
            })
        })
    })
    context('Negative cases', () => {
        it('Empty fields', () => {
            cy.get('#user-form button[type="submit"]').click()
            cy.get('div#form-errors').should('be.visible')
            cy.get('div#form-errors ul').find('li').should('have.length', 5)
            cy.get('ul li').eq(0).should('have.text', 'Name must be 1–20 letters only (no spaces or symbols).')
            cy.get('ul li').eq(1).should('have.text', 'Role is required.')
            cy.get('ul li').eq(2).should('have.text', 'Age must be between 1 and 99.')
            cy.get('ul li').eq(3).should('have.text', 'Valid email is required.')
            cy.get('ul li').eq(4).should('have.text', 'Gender selection is required.')
        })
        it('Only name', () => {
            cy.get('#name').type(name)
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Role is required.')
            cy.get('ul li').eq(1).should('have.text', 'Age must be between 1 and 99.')
            cy.get('ul li').eq(2).should('have.text', 'Valid email is required.')
            cy.get('ul li').eq(3).should('have.text', 'Gender selection is required.')
        })
        it('Name requirements', () => {
            cy.get('#name').type('    ')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Name must be 1–20 letters only (no spaces or symbols).')
            cy.get('#name').clear()
            cy.get('#name').type('$Joe$')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Name must be 1–20 letters only (no spaces or symbols).')
            cy.get('#name').clear()
            cy.get('#name').type('12345')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Name must be 1–20 letters only (no spaces or symbols).')
            cy.get('#name').clear()
            cy.get('#name').type('qwertyqwertyqwertyqwerty')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Name must be 1–20 letters only (no spaces or symbols).')
        })
        it('Without role', () => {
            cy.get('#name').type(name)
            cy.get('#age').type(age.toString())
            cy.get('#email').type(email)
            cy.get('input[value="Male"]').check()
            cy.get('input[value="Product Updates"]').check()
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Role is required.')
        })
        it('Without age', () => {
            cy.get('#name').type(name)
            cy.get('#email').type(email)
            cy.get('#role').select(role)
            cy.get('input[value="Male"]').check()
            cy.get('input[value="Product Updates"]').check()
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Age must be between 1 and 99.')
        })
        it('Age requirements', () => {
            cy.get('#age').type('   ')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(2).should('have.text', 'Age must be between 1 and 99.')
            cy.get('#age').clear()
            cy.get('#age').type('0')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(2).should('have.text', 'Age must be between 1 and 99.')
            cy.get('#age').clear()
            cy.get('#age').type('100')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(2).should('have.text', 'Age must be between 1 and 99.')
            cy.get('#age').clear()
            cy.get('#age').type('17.5')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(2).should('have.text', 'Age must be between 1 and 99.')
        })
        it('Without Email', () => {
            cy.get('#name').type(name)
            cy.get('#age').type(age.toString())
            cy.get('#role').select(role)
            cy.get('input[value="Male"]').check()
            cy.get('input[value="Product Updates"]').check()
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Valid email is required.')
        })
        it('Email requirements', () => {
            cy.get('#email').type('$@$.$')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(3).should('have.text', 'Valid email is required.')
            cy.get('#email').clear()
            cy.get('#email').type('0@0.0')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(3).should('have.text', 'Valid email is required.')
            cy.get('#email').clear()
            cy.get('#email').type('aaaa@mail')
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(3).should('have.text', 'Valid email is required.')
            cy.get('#email').clear()
        })
        it('Without gender', () => {
            cy.get('#name').type(name)
            cy.get('#age').type(age.toString())
            cy.get('#role').select(role)
            cy.get('#email').type(email)
            cy.get('input[value="Product Updates"]').check()
            cy.get('#user-form button[type="submit"]').click()
            cy.get('ul li').eq(0).should('have.text', 'Gender selection is required.')
        })
    })
})
describe('User table section', () => {
    beforeEach(() => {
        cy.visit('http://127.0.0.1:8080/Resources/htmls/CSS/user_management.html')
    })
    const uniqueName = 'Alicea';
    const uniqueRole = 'Editor';
    const uniqueAge = '33';
    const uniqueEmail = 'alice@site.com.com';

    context('Positive cases', () => {
        it('Should check user edit', () => {
            cy.get('.btn-secondary.edit-btn').eq(0).click()
            cy.get('#name').should('have.value', 'Alice')
            cy.get('#role').should('have.value', 'Admin')
            cy.get('#age').should('have.value', 30)
            cy.get('#email').should('have.value', 'alice@site.com')
            cy.get('input[value="Female"]').should('be.checked')
            cy.get('input[value="Newsletter"]').should('be.checked')
            cy.get('#name').clear().type(uniqueName)
            cy.get('#role').select(uniqueRole)
            cy.get('#age').clear().type(uniqueAge)
            cy.get('#email').clear().type(uniqueEmail)
            cy.get('input[value="Other"]').check()
            cy.get('input[value="Newsletter"]').uncheck()
            cy.get('input[value="Product Updates"]').check()
            cy.get('#user-form button[type="submit"]').click()
            cy.get('tbody tr').first().within(() => {
                cy.get('td').eq(0).should('contain', uniqueName)
                cy.get('td').eq(1).should('contain', uniqueRole)
                cy.get('td').eq(2).should('contain', uniqueAge)
                cy.get('td').eq(3).should('contain', uniqueEmail)
                cy.get('td').eq(4).should('contain', 'Other')
                cy.get('td').eq(5).should('contain', 'Product Updates')
            })
            cy.get('.btn-primary.status-btn').eq(0).click()
            cy.get('tbody tr').first().within(() => {
                cy.get('td').eq(6).should('contain', 'Inactive')
            })
            cy.get('.btn-danger.delete-btn').eq(1).click()
            cy.get('#confirm-delete').click()
            cy.get('tbody tr').should('have.length', 2)
        })
    })
    context('Negative cases', () => {
        it('Delete admin', () => {
            cy.get('.btn-danger.delete-btn').eq(0).click()
            cy.get('div#admin-delete-error').should('have.text', 'Admin login required to delete Admin-level users.')
        })
    })
})
describe('Auth', () => {
    beforeEach(() => {
        cy.visit('http://127.0.0.1:8080/Resources/htmls/CSS/user_management.html')
    })
    const login = 'admin@example.com';
    const password = 'admin123';
    
    context('Negative cases', () => {
        it('Empty fields', () => {
            cy.get("[class*='btn-primary']").first().click()
            cy.get('#login-status').should('contain', 'Invalid credentials')
        })
        it('Wrong email', () => {
            cy.get('#admin-email').type('   ')
            cy.get('#admin-password').type(password)
            cy.get("[class*='btn-primary']").first().click()
            cy.get('#login-status').should('contain', 'Invalid credentials')
        })
        it('Wrong password', () => {
            cy.get('#admin-email').type(login)
            cy.get('#admin-password').type('   ')
            cy.get("[class*='btn-primary']").first().click()
            cy.get('#login-status').should('contain', 'Invalid credentials')
        })
    })
    context.only('Positive cases', () => {
        it('Should log in', () => {
            cy.get('#admin-email').type(login)
            cy.get('#admin-password').type(password)
            cy.get("[class*='btn-primary']").first().click()
            cy.get('#admin-controls').should('contain', 'You are logged in as admin.')
            cy.get("[class*='btn-secondary']").first().should('contain.text', 'Logout')
            cy.get('.btn-danger.delete-btn').eq(0).click()
            cy.get('#confirm-delete').click()
            cy.get('tbody tr').should('have.length', 2)
            cy.get("[class*='btn-secondary']").first().click()
            cy.get('#admin-controls').should('not.be.visible')
        })
    })
})

        // cy.get('section').eq(1)
        // cy.get('#form-title')
        // cy.get('#user-form')
        // cy.get('label[for="name"]')
        // cy.get('#name')
        // cy.get('label[for="role"]')
        // cy.get('#role')
        // cy.get('option[value="Admin"]')
        // cy.get('option[value="Editor"]')
        // cy.get('option[value="Viewer"]')
        // cy.get('label[for="age"]')
        // cy.get('#age')
        // cy.get('label[for="email"]')
        // cy.get('#email')
        // cy.get('div.full-width').eq(3).should('contain', 'Gender')
        // cy.get('input[value="Male"]')
        // cy.get('input[value="Female"]')
        // cy.get('input[value="Other"]')
        // cy.get('div.full-width').eq(4).should('contain', 'Subscribe to')
        // cy.get('input[value="Newsletter"]')
        // cy.get('input[value="Product Updates"]')
        // cy.get('button[type="Submit"]').should('contain', 'Save')